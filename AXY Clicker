<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<title>AXY Money Clicker</title>
	<style>
		/* Classic Windows 95-ish style */
		body {
			font-family: "MS Sans Serif", Tahoma, Geneva, sans-serif;
			background: #c0c0c0;
			color: black;
			margin: 0;
			padding: 20px;
			user-select: none;
		}

		h1 {
			background: #000080;
			color: white;
			font-weight: bold;
			padding: 6px 10px;
			margin: 0 0 15px 0;
			border: 2px solid #ffffff;
		}

		#money {
			font-size: 28px;
			margin: 20px 0;
			background: white;
			border: 2px inset #fff;
			padding: 10px;
			width: 200px;
			margin-left: auto;
			margin-right: auto;
		}

		button {
			font-family: inherit;
			font-size: 14px;
			padding: 6px 10px;
			margin: 5px;
			border: 2px outset #fff;
			background: #c0c0c0;
			cursor: pointer;
		}

		button:active {
			border-style: inset;
		}

		#clickButton {
			background: #000080;
			color: white;
			font-weight: bold;
			font-size: 22px;
			padding: 15px 40px;
			margin: 0 auto 20px auto;
			display: block;
		}

		.section {
			background: #e0e0e0;
			border: 2px outset #fff;
			padding: 10px;
			margin: 10px auto;
			max-width: 350px;
		}

		.shop-item {
			border: 2px inset #fff;
			padding: 5px;
			margin: 5px 0;
		}

		.shop-item strong {
			display: block;
		}

		#message {
			height: 20px;
			font-weight: bold;
			text-align: center;
			margin: 5px 0 10px 0;
			color: #800000;
		}

		#casino {
			margin-top: 15px;
		}

		#slots {
			font-size: 40px;
			letter-spacing: 10px;
			background: white;
			padding: 10px;
			border: 2px inset #fff;
			margin-bottom: 8px;
			user-select: none;
		}

		#slotsMessage {
			height: 20px;
			font-weight: bold;
			color: #008000;
		}

		#achievements {
			max-height: 150px;
			overflow-y: auto;
			background: white;
			border: 2px inset #fff;
			padding: 5px;
			font-size: 12px;
			margin-top: 10px;
		}

		#achievements h3 {
			margin: 0 0 5px 0;
		}

		#prestige-info {
			font-size: 14px;
			margin-top: 10px;
			font-weight: bold;
		}

		#saveImportExport {
			margin-top: 15px;
			text-align: center;
		}

		input[type="text"] {
			font-family: monospace;
			width: 90%;
			margin: 5px 0;
			padding: 5px;
			border: 2px inset #fff;
		}

		#confettiCanvas {
			position: fixed;
			top: 0;
			left: 0;
			width: 100vw;
			height: 100vh;
			pointer-events: none;
			z-index: 9999;
		}
	</style>
</head>

<body>
	<h1>AXY Money Clicker</h1>
	<div id="money">$0</div>
	<button id="clickButton">Tap to Make Money</button>
	<div id="message"></div>

	<div class="section">
		<h2>Upgrades</h2>
		<div class="shop-item">
			<strong>Better Taps</strong>
			+$1 per click<br />
    Cost: $<span id="clickUpgradeCost">50</span><br />
			<button id="buyClickUpgrade">Buy</button>
		</div>
		<div class="shop-item">
			<strong>Auto Clicker</strong>
			+$1/sec<br />
    Cost: $<span id="autoClickerCost">100</span><br />
    Owned: <span id="autoClickerCount">0</span><br />
			<button id="buyAutoClicker">Buy</button>
		</div>
		<div class="shop-item">
			<strong>Mega Tap</strong>
			+$10 per click<br />
    Cost: $<span id="megaTapCost">1000</span><br />
    Owned: <span id="megaTapCount">0</span><br />
			<button id="buyMegaTap">Buy</button>
		</div>
		<div class="shop-item">
			<strong>Super Auto Clicker</strong>
			+$10/sec<br />
    Cost: $<span id="superAutoClickerCost">5000</span><br />
    Owned: <span id="superAutoClickerCount">0</span><br />
			<button id="buySuperAutoClicker">Buy</button>
		</div>
		<div class="shop-item">
			<strong>Multiplier Upgrade</strong>
			+0.1x multiplier<br />
    Cost: $<span id="multiplierUpgradeCost">10000</span><br />
    Owned: <span id="multiplierUpgradeCount">0</span><br />
			<button id="buyMultiplierUpgrade">Buy</button>
		</div>
	</div>

	<div class="section">
		<h2>Prestige</h2>
		<div id="prestige-info">Prestige Points: <span id="prestigePoints">0</span><br />
  Multiplier: <span id="prestigeMultiplier">1.0</span>x</div>
		<button id="prestigeButton">Prestige (Need $1,000,000)</button>
	</div>

	<div class="section" id="casino">
		<h2>üé∞ Casino</h2>
		<div id="slots">üçí üçã üçâ</div>
		<div id="slotsMessage"></div>
		<button id="slotsSpinBtn">Spin Slots ($10)</button>
	</div>

	<div class="section">
		<h2>Achievements</h2>
		<div id="achievements">
			<h3>Achievements Unlocked:</h3>
		</div>
	</div>

	<div class="section" id="saveImportExport">
		<h2>Save / Load</h2>
		<button id="exportBtn">Export Save</button><br />
		<input type="text" id="saveCodeInput" placeholder="Paste save code here" />
		<button id="importBtn">Import Save</button>
	</div>

	<div class="section">
		<button id="soundToggle">Sound: ON</button>
		<button id="resetButton">Reset Game</button>
	</div>

	<canvas id="confettiCanvas"></canvas>

	<script>
		(() => {
  // Game variables
  let money = 0;
  let moneyPerClick = 1;
  let clickUpgradeCost = 50;

  let autoClickerCount = 0;
  let autoClickerCost = 100;

  let megaTapCount = 0;
  let megaTapCost = 1000;

  let superAutoClickerCount = 0;
  let superAutoClickerCost = 5000;

  let multiplierUpgradeCount = 0;
  let multiplierUpgradeCost = 10000;

  let prestigePoints = 0;
  let prestigeMultiplier = 1.0;

  let cheatMode = false;
  let slotsWins = 0;

  let soundEnabled = true;

  // DOM Elements
  const moneyEl = document.getElementById("money");
  const clickButton = document.getElementById("clickButton");
  const clickUpgradeCostEl = document.getElementById("clickUpgradeCost");
  const autoClickerCostEl = document.getElementById("autoClickerCost");
  const autoClickerCountEl = document.getElementById("autoClickerCount");
  const megaTapCostEl = document.getElementById("megaTapCost");
  const megaTapCountEl = document.getElementById("megaTapCount");
  const superAutoClickerCostEl = document.getElementById("superAutoClickerCost");
  const superAutoClickerCountEl = document.getElementById("superAutoClickerCount");
  const multiplierUpgradeCostEl = document.getElementById("multiplierUpgradeCost");
  const multiplierUpgradeCountEl = document.getElementById("multiplierUpgradeCount");

  const prestigePointsEl = document.getElementById("prestigePoints");
  const prestigeMultiplierEl = document.getElementById("prestigeMultiplier");
  const prestigeButton = document.getElementById("prestigeButton");

  const messageEl = document.getElementById("message");

  const slotsEl = document.getElementById("slots");
  const slotsMessageEl = document.getElementById("slotsMessage");
  const slotsSpinBtn = document.getElementById("slotsSpinBtn");

  const achievementsEl = document.getElementById("achievements");

  const exportBtn = document.getElementById("exportBtn");
  const importBtn = document.getElementById("importBtn");
  const saveCodeInput = document.getElementById("saveCodeInput");

  const soundToggle = document.getElementById("soundToggle");
  const resetButton = document.getElementById("resetButton");

  // Sounds (simple beep tones using Web Audio API)
  const audioCtx = new (window.AudioContext || window.webkitAudioContext)();

  function playSound(freq = 440, duration = 100) {
    if (!soundEnabled) return;
    const oscillator = audioCtx.createOscillator();
    const gainNode = audioCtx.createGain();
    oscillator.connect(gainNode);
    gainNode.connect(audioCtx.destination);
    oscillator.type = "square";
    oscillator.frequency.value = freq;
    oscillator.start();
    gainNode.gain.setValueAtTime(0.1, audioCtx.currentTime);
    oscillator.stop(audioCtx.currentTime + duration / 1000);
  }

  // Achievements data
  const achievements = [
    { id: 1, name: "First Click", desc: "Make your first click", condition: () => money > 0, achieved: false },
    { id: 2, name: "Rich!", desc: "Reach $1000", condition: () => money >= 1000, achieved: false },
    { id: 3, name: "Millionaire", desc: "Reach $1,000,000", condition: () => money >= 1000000, achieved: false },
    { id: 4, name: "Auto Clicker Owner", desc: "Buy an Auto Clicker", condition: () => autoClickerCount > 0, achieved: false },
    { id: 5, name: "Prestigious", desc: "Gain your first Prestige Point", condition: () => prestigePoints > 0, achieved: false },
    { id: 6, name: "Slots Winner", desc: "Win the slot jackpot", condition: () => slotsWins > 0, achieved: false },
  ];

  function checkAchievements() {
    let newUnlock = false;
    achievements.forEach(a => {
      if (!a.achieved && a.condition()) {
        a.achieved = true;
        newUnlock = true;
        addAchievementNotification(a.name);
      }
    });
    if (newUnlock) renderAchievements();
  }

  function renderAchievements() {
    let html = "<h3>Achievements Unlocked:</h3><ul>";
    achievements.forEach(a => {
      if (a.achieved) {
        html += `<li>${a.name}: ${a.desc}</li>`;
      }
    });
    html += "</ul>";
    achievementsEl.innerHTML = html;
  }

  // Confetti effect
  const canvas = document.getElementById("confettiCanvas");
  const ctx = canvas.getContext("2d");
  let confettiPieces = [];

  function ConfettiPiece() {
    this.x = Math.random() * window.innerWidth;
    this.y = Math.random() * window.innerHeight - window.innerHeight;
    this.size = 5 + Math.random() * 5;
    this.speed = 1 + Math.random() * 3;
    this.color = `hsl(${Math.floor(Math.random() * 360)}, 100%, 60%)`;
    this.tilt = Math.random() * 10 - 10;
    this.tiltSpeed = Math.random() * 0.1 + 0.05;
  }

  ConfettiPiece.prototype.update = function() {
    this.y += this.speed;
    this.tilt += this.tiltSpeed;
    if (this.y > window.innerHeight) {
      this.y = -this.size;
      this.x = Math.random() * window.innerWidth;
    }
  };

  ConfettiPiece.prototype.draw = function(ctx) {
    ctx.beginPath();
    ctx.lineWidth = this.size / 2;
    ctx.strokeStyle = this.color;
    ctx.moveTo(this.x + this.tilt, this.y);
    ctx.lineTo(this.x - this.tilt, this.y + this.tilt + this.size / 2);
    ctx.stroke();
  };

  function createConfetti(count = 100) {
    confettiPieces = [];
    for (let i = 0; i < count; i++) {
      confettiPieces.push(new ConfettiPiece());
    }
  }

  function renderConfetti() {
    if (confettiPieces.length === 0) return;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    confettiPieces.forEach(p => {
      p.update();
      p.draw(ctx);
    });
  }

  function triggerConfetti() {
    createConfetti();
    setTimeout(() => {
      confettiPieces = [];
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    }, 5000);
  }

  function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  }
  window.addEventListener("resize", resizeCanvas);
  resizeCanvas();
  function animationLoop() {
    renderConfetti();
    requestAnimationFrame(animationLoop);
  }
  animationLoop();

  // UI update function
  function updateUI() {
    moneyEl.textContent = `$${Math.floor(money)}`;
    clickUpgradeCostEl.textContent = clickUpgradeCost;
    autoClickerCostEl.textContent = autoClickerCost;
    autoClickerCountEl.textContent = autoClickerCount;
    megaTapCostEl.textContent = megaTapCost;
    megaTapCountEl.textContent = megaTapCount;
    superAutoClickerCostEl.textContent = superAutoClickerCost;
    superAutoClickerCountEl.textContent = superAutoClickerCount;
    multiplierUpgradeCostEl.textContent = multiplierUpgradeCost;
    multiplierUpgradeCountEl.textContent = multiplierUpgradeCount;

    prestigePointsEl.textContent = prestigePoints;
    prestigeMultiplierEl.textContent = prestigeMultiplier.toFixed(2);

    soundToggle.textContent = `Sound: ${soundEnabled ? "ON" : "OFF"}`;
  }

  // Show message for a short time
  let messageTimeout;
  function showMessage(text, duration = 2000) {
    clearTimeout(messageTimeout);
    messageEl.textContent = text;
    if (duration > 0) {
      messageTimeout = setTimeout(() => {
        messageEl.textContent = "";
      }, duration);
    }
  }

  // Money click handler
  clickButton.addEventListener("click", () => {
    if (cheatMode) {
      money += 10000 * prestigeMultiplier;
    } else {
      money += (moneyPerClick + megaTapCount * 10) * prestigeMultiplier;
    }
    updateUI();
    checkAchievements();
  });

  // Buy functions

  document.getElementById("buyClickUpgrade").addEventListener("click", () => {
    if (money >= clickUpgradeCost) {
      money -= clickUpgradeCost;
      moneyPerClick += 1;
      clickUpgradeCost = Math.floor(clickUpgradeCost * 1.5);
      playSound(600, 100);
      updateUI();
      checkAchievements();
      saveGame();
    } else {
      showMessage("Not enough money!");
    }
  });

  document.getElementById("buyAutoClicker").addEventListener("click", () => {
    if (money >= autoClickerCost) {
      money -= autoClickerCost;
      autoClickerCount += 1;
      autoClickerCost = Math.floor(autoClickerCost * 1.6);
      playSound(600, 100);
      updateUI();
      checkAchievements();
      saveGame();
    } else {
      showMessage("Not enough money!");
    }
  });

  document.getElementById("buyMegaTap").addEventListener("click", () => {
    if (money >= megaTapCost) {
      money -= megaTapCost;
      megaTapCount += 1;
      megaTapCost = Math.floor(megaTapCost * 1.7);
      playSound(600, 100);
      updateUI();
      checkAchievements();
      saveGame();
    } else {
      showMessage("Not enough money!");
    }
  });

  document.getElementById("buySuperAutoClicker").addEventListener("click", () => {
    if (money >= superAutoClickerCost) {
      money -= superAutoClickerCost;
      superAutoClickerCount += 1;
      superAutoClickerCost = Math.floor(superAutoClickerCost * 1.7);
      playSound(600, 100);
      updateUI();
      checkAchievements();
      saveGame();
    } else {
      showMessage("Not enough money!");
    }
  });

  document.getElementById("buyMultiplierUpgrade").addEventListener("click", () => {
    if (money >= multiplierUpgradeCost) {
      money -= multiplierUpgradeCost;
      multiplierUpgradeCount += 1;
      multiplierUpgradeCost = Math.floor(multiplierUpgradeCost * 2);
      prestigeMultiplier = 1 + prestigePoints * 0.1 + multiplierUpgradeCount * 0.1;
      playSound(600, 100);
      updateUI();
      checkAchievements();
      saveGame();
    } else {
      showMessage("Not enough money!");
    }
  });

  // Auto clicker intervals
  setInterval(() => {
    if (autoClickerCount > 0) {
      money += autoClickerCount * 1 * prestigeMultiplier;
    }
    if (superAutoClickerCount > 0) {
      money += superAutoClickerCount * 10 * prestigeMultiplier;
    }
    updateUI();
    checkAchievements();
  }, 1000);

  // Prestige button
  prestigeButton.addEventListener("click", () => {
    if (money >= 1000000) {
      const gained = Math.floor(money / 1000000);
      prestigePoints += gained;
      money = 0;
      prestigeMultiplier = 1 + prestigePoints * 0.1 + multiplierUpgradeCount * 0.1;
      showMessage(`Prestiged! Gained ${gained} Prestige Points`, 3000);
      playSound(900, 200);
      updateUI();
      checkAchievements();
      saveGame();
    } else {
      showMessage("Need $1,000,000 to prestige!");
    }
  });

  // Slots logic
  const slotSymbols = ["üçí", "üçã", "üçâ", "‚≠ê", "7Ô∏è‚É£"];
  function spinSlots() {
    if (money < 10) {
      slotsMessageEl.textContent = "Need $10 to spin!";
      playSound(200, 100);
      return;
    }
    money -= 10;
    updateUI();

    let spins = [];
    for (let i = 0; i < 3; i++) {
      spins.push(slotSymbols[Math.floor(Math.random() * slotSymbols.length)]);
    }

    // Animate slots (simple quick animation)
    let frame = 0;
    const animationFrames = 10;
    const animationInterval = setInterval(() => {
      let display = [];
      for (let i = 0; i < 3; i++) {
        display.push(slotSymbols[Math.floor(Math.random() * slotSymbols.length)]);
      }
      slotsEl.textContent = display.join(" ");
      frame++;
      if (frame >= animationFrames) {
        clearInterval(animationInterval);
        slotsEl.textContent = spins.join(" ");
        checkSlotsWin(spins);
      }
    }, 75);
  }

  function checkSlotsWin(spins) {
    // 5% chance to win big jackpot (all same symbol)
    const jackpot = spins.every(s => s === spins[0]);
    if (jackpot && Math.random() < 0.05) {
      const jackpotAmount = 1000;
      money += jackpotAmount;
      slotsWins++;
      slotsMessageEl.textContent = `JACKPOT! +$${jackpotAmount}`;
      playSound(1200, 300);
      triggerConfetti();
      checkAchievements();
      updateUI();
      saveGame();
    } else if (jackpot) {
      // small win if all same but no jackpot chance hit
      const smallWin = 100;
      money += smallWin;
      slotsMessageEl.textContent = `Nice! +$${smallWin}`;
      playSound(800, 200);
      updateUI();
      saveGame();
    } else {
      slotsMessageEl.textContent = "No win, try again!";
      playSound(300, 100);
    }
  }

  slotsSpinBtn.addEventListener("click", spinSlots);

  // Cheat mode toggle (hidden secret command)

  // Detect secret key combo "A X Y" pressed simultaneously to toggle cheat mode.
  // We'll interpret keys: A (65), X (88), Y (89).
  const keysPressed = new Set();

  window.addEventListener("keydown", (e) => {
    keysPressed.add(e.key.toUpperCase());
    if (
      keysPressed.has("A") &&
      keysPressed.has("X") &&
      keysPressed.has("Y")
    ) {
      cheatMode = !cheatMode;
      showMessage(`AXY MODE ${cheatMode ? "Activated" : "Deactivated"}`, 3000);
      playSound(1000, 300);
      keysPressed.clear();
    }
  });

  window.addEventListener("keyup", (e) => {
    keysPressed.delete(e.key.toUpperCase());
  });

  // Save/load functionality

  function saveGame() {
    const saveData = {
      money,
      moneyPerClick,
      clickUpgradeCost,
      autoClickerCount,
      autoClickerCost,
      megaTapCount,
      megaTapCost,
      superAutoClickerCount,
      superAutoClickerCost,
      multiplierUpgradeCount,
      multiplierUpgradeCost,
      prestigePoints,
      prestigeMultiplier,
      slotsWins,
      cheatMode,
      soundEnabled,
    };
    try {
      const saveString = btoa(JSON.stringify(saveData));
      localStorage.setItem("axyMoneyClickerSave", saveString);
    } catch {
      // ignore errors
    }
  }

  function loadGame() {
    try {
      const saveString = localStorage.getItem("axyMoneyClickerSave");
      if (!saveString) return false;
      const saveData = JSON.parse(atob(saveString));
      Object.assign(
        {
          money: 0,
          moneyPerClick: 1,
          clickUpgradeCost: 50,
          autoClickerCount: 0,
          autoClickerCost: 100,
          megaTapCount: 0,
          megaTapCost: 1000,
          superAutoClickerCount: 0,
          superAutoClickerCost: 5000,
          multiplierUpgradeCount: 0,
          multiplierUpgradeCost: 10000,
          prestigePoints: 0,
          prestigeMultiplier: 1.0,
          slotsWins: 0,
          cheatMode: false,
          soundEnabled: true,
        },
        saveData
      );
      money = saveData.money || 0;
      moneyPerClick = saveData.moneyPerClick || 1;
      clickUpgradeCost = saveData.clickUpgradeCost || 50;
      autoClickerCount = saveData.autoClickerCount || 0;
      autoClickerCost = saveData.autoClickerCost || 100;
      megaTapCount = saveData.megaTapCount || 0;
      megaTapCost = saveData.megaTapCost || 1000;
      superAutoClickerCount = saveData.superAutoClickerCount || 0;
      superAutoClickerCost = saveData.superAutoClickerCost || 5000;
      multiplierUpgradeCount = saveData.multiplierUpgradeCount || 0;
      multiplierUpgradeCost = saveData.multiplierUpgradeCost || 10000;
      prestigePoints = saveData.prestigePoints || 0;
      prestigeMultiplier = saveData.prestigeMultiplier || 1.0;
      slotsWins = saveData.slotsWins || 0;
      cheatMode = saveData.cheatMode || false;
      soundEnabled = saveData.soundEnabled ?? true;
      updateUI();
      renderAchievements();
      return true;
    } catch {
      showMessage("Failed to load save. The code may be invalid or corrupted.", 5000);
      return false;
    }
  }

  // Export save
  exportBtn.addEventListener("click", () => {
    try {
      const saveData = {
        money,
        moneyPerClick,
        clickUpgradeCost,
        autoClickerCount,
        autoClickerCost,
        megaTapCount,
        megaTapCost,
        superAutoClickerCount,
        superAutoClickerCost,
        multiplierUpgradeCount,
        multiplierUpgradeCost,
        prestigePoints,
        prestigeMultiplier,
        slotsWins,
        cheatMode,
        soundEnabled,
      };
      const saveString = btoa(JSON.stringify(saveData));
      saveCodeInput.value = saveString;
      showMessage("Save code exported! Copy it from the box below.", 4000);
    } catch {
      showMessage("Failed to export save.", 4000);
    }
  });

  // Import save
  importBtn.addEventListener("click", () => {
    const saveString = saveCodeInput.value.trim();
    if (!saveString) {
      showMessage("Please paste a save code to import.", 3000);
      return;
    }
    try {
      const saveData = JSON.parse(atob(saveString));
      money = saveData.money || 0;
      moneyPerClick = saveData.moneyPerClick || 1;
      clickUpgradeCost = saveData.clickUpgradeCost || 50;
      autoClickerCount = saveData.autoClickerCount || 0;
      autoClickerCost = saveData.autoClickerCost || 100;
      megaTapCount = saveData.megaTapCount || 0;
      megaTapCost = saveData.megaTapCost || 1000;
      superAutoClickerCount = saveData.superAutoClickerCount || 0;
      superAutoClickerCost = saveData.superAutoClickerCost || 5000;
      multiplierUpgradeCount = saveData.multiplierUpgradeCount || 0;
      multiplierUpgradeCost = saveData.multiplierUpgradeCost || 10000;
      prestigePoints = saveData.prestigePoints || 0;
      prestigeMultiplier = saveData.prestigeMultiplier || 1.0;
      slotsWins = saveData.slotsWins || 0;
      cheatMode = saveData.cheatMode || false;
      soundEnabled = saveData.soundEnabled ?? true;
      updateUI();
      renderAchievements();
      saveGame();
      showMessage("Save loaded successfully!", 3000);
    } catch {
      showMessage("Invalid or corrupted save code!", 4000);
    }
  });

  // Sound toggle
  soundToggle.addEventListener("click", () => {
    soundEnabled = !soundEnabled;
    updateUI();
  });

  // Reset button
  resetButton.addEventListener("click", () => {
    if (confirm("Are you sure you want to reset the game?")) {
      money = 0;
      moneyPerClick = 1;
      clickUpgradeCost = 50;
      autoClickerCount = 0;
      autoClickerCost = 100;
      megaTapCount = 0;
      megaTapCost = 1000;
      superAutoClickerCount = 0;
      superAutoClickerCost = 5000;
      multiplierUpgradeCount = 0;
      multiplierUpgradeCost = 10000;
      prestigePoints = 0;
      prestigeMultiplier = 1.0;
      slotsWins = 0;
      cheatMode = false;
      soundEnabled = true;
      updateUI();
      renderAchievements();
      saveGame();
      showMessage("Game reset.");
    }
  });

  // Initial load
  if (!loadGame()) {
    updateUI();
    renderAchievements();
  }
  setInterval(saveGame, 15000);
})();
	</script>
</body>

</html>
